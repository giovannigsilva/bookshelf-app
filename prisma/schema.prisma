generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 1. Definição do ENUM para o Status de Leitura
// model Genre {
//   id    String @id @default(uuid())
//   name  String @unique
//   books Book[]
// }

// model Book {
//   id          String        @id @default(uuid())
//   title       String
//   author      String
//   genreId     String?
//   year        Int?
//   pages       Int?
//   currentPage Int           @default(0)
//   rating      Int?
//   synopsis    String
//   cover       String?
//   isbn        String?
//   notes       String?
//   status      ReadingStatus @default(QUERO_LER)
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   genre       Genre?        @relation(fields: [genreId], references: [id])

//   @@index([title])
//   @@index([author])
// }

enum ReadingStatus {
  QUERO_LER
  LENDO
  LIDO
  PAUSADO
  ABANDONADO
}

// 2. Modelo de Gênero (para gerenciamento dinâmico) 
model Genre {
  id   String @id @default(uuid())
  name String @unique // Garante unicidade dos nomes 

  // Relacionamento com Livros
  books Book[]
}

// 3. Modelo de Livro Expandido 
model Book {
  id     String @id @default(uuid())
  title  String // Preservado 
  author String // Preservado 

  // Relacionamento com Gênero
  genreId String? // Chave estrangeira para o modelo Genre
  genre   Genre?  @relation(fields: [genreId], references: [id])

  year        Int? // Preservado 
  pages       Int? // Preservado
  currentPage Int     @default(0) // Novo campo obrigatório
  rating      Int? // Preservado (1-5 estrelas) 
  synopsis    String // Preservado 
  cover       String? // Preservado 
  isbn        String? // Novo campo opcional 
  notes       String? // Novo campo opcional (texto longo) 

  // Status de Leitura (Novo campo obrigatório) 
  status ReadingStatus @default(QUERO_LER)

  // Metadados (Novos campos obrigatórios) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
  @@index([author])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
